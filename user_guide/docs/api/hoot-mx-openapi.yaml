openapi: 3.0.0
info:
  title: HooT-API
  version: 1.0.0
  contact:
    name: HooT @ MPSC
    email: dev@mpsc.io
    url: 'https://www.hoot.mx/support-page'
  termsOfService: 'https://www.hoot.mx/terms-and-conditions/terms-and-conditions'
servers:
  - url: 'https://devapi.hoot.mx'
    description: Generic
paths:
  /v1/login:
    post:
      summary: WebLogin
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    user_id: user@email.com
                    user_uuid: 123e4567-e89b-12d3-a456-426614174000
                properties:
                  user_id:
                    type: string
                    minLength: 1
                    pattern: '^[a-zA-Z0-9.a-zA-Z0-9.!#$%&''*+-/=?^_`{|}~]+@[a-zA-Z0-9]+\.[a-zA-Z]+'
                    example: dev@mpsc.io
                  user_uuid:
                    type: string
                    minLength: 1
                    pattern: ^(?!\s*$).+
                    example: 728de4da-e94f-4367-80e7-c672814a55e6
                required:
                  - user_id
                  - user_uuid
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      description: |-
        HooT's WebLogin API allows you to record or register login event of a user. 
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        The API returns a JSON object with two parameters: user id as `user_id` and `user_uuid` as unique user id. This unique user id is used to identify the user across the conferencing system
      parameters:
        - schema:
            type: string
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            enum:
              - Generic
              - Speakerbus
            example: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
            examples:
              Example-BB:
                value:
                  given_name: Jane
                  family_name: Doe
                  nickname: Jane.Doe
                  name: Jane Doe
                  picture: 'https://lh3.googleusercontent.com/a/AATxxxxx=s96-c'
                  locale: en-GB
                  updated_at: '2022-03-12T10:31:28.797Z'
                  email: jane.doe@example.com
                  email_verified: true
                  sub: google-oauth2|108203387585675245469
        description: 'In the request body, the user profile is passed. This user profile is generated when we have logged in/signed up through the third-party authentication system Auth0. The user profile is a JSON object, which looks like the object shown in Example-BB.'
    parameters: []
  '/v1/check_conf/{conf_id}':
    parameters:
      - schema:
          type: string
          example: 6e19e88d-634f-4872-826b-2d26503caba1
          minLength: 1
          pattern: ^(?!\s*$).+
        name: conf_id
        in: path
        required: true
        description: unique conference id used to identify a conference
    get:
      summary: CheckConferenceByID
      tags: []
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: get-check_conf-conf_id
      parameters:
        - schema:
            type: string
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            minLength: 1
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            example: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |-
        Use HooT's CheckConferenceByID API to check if a conference is alive.
        The API takes Conference ID coined `conf_id` as a path parameter.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        The API returns a 200 response code in case a conference with the given Conference ID is alive, else it returns a 404 reponse code.
  '/v1/user/{user_uuid}/last_joined_conferences':
    parameters:
      - schema:
          type: string
          example: a5c818fb-bd18-41f6-a030-745ff9fe7f21
          minLength: 1
          maxLength: 36
          pattern: ^(?!\s*$).+
        name: user_uuid
        in: path
        required: true
        description: unique user id used to identify a user
    get:
      summary: UserLastJoinedConferences
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partyconf'
        '204':
          description: No Content
      operationId: get-user-user_uuid-last_joined
      parameters:
        - schema:
            type: integer
          in: query
          name: from
          description: from index
        - schema:
            type: integer
            default: -1
          in: query
          name: to
          description: to index (-1 means all)
        - schema:
            type: string
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            minLength: 1
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            example: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |-
        Use HooT's UserLastJoinedConferences API to fetch list of conferences recently joined by the user within a valid range of values (to,from).
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        Unique user id as `user_uuid` is passed as a path parameter to identify the user for whom the list of last joined conferences is to be retrieved.
        If from is greater than maximum number of conferences joined by the user, then 204 is returned as the response code with no reponse body.
        If to is greater than the maximum number of conferences joined, then conferences are returned within index range of (from,maximum number of conferences joined).
  '/v1/user/{user_uuid}/invited_to_conferences':
    parameters:
      - schema:
          type: string
          pattern: ^(?!\s*$).+
          minLength: 1
          maxLength: 36
          example: a5c818fb-bd18-41f6-a030-745ff9fe7f21
        name: user_uuid
        in: path
        required: true
        description: unique user id used to identify a user
    get:
      summary: UserInvitedToConferences
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partyconf'
        '204':
          description: No Content
      operationId: get-user-user_uuid-invited_to_conferences
      parameters:
        - schema:
            type: integer
            minimum: 0
          in: query
          name: from
          description: from index
        - schema:
            type: integer
            default: -1
          in: query
          name: to
          description: to index (-1) means all or max
        - schema:
            type: string
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            example: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |-
        Use HooT's UserInvitedToConferences API to fetch list of conferences a user has been invited to, within a valid range of values (to,from).
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        Unique user id as `user_uuid` is passed as a path parameter to identify the user for whom the list of invited conferences is to be retrieved.
        If from is greater than maximum number of conferences the user has been invited to, then 204 is returned as the response code with no reponse body.
        If to is greater than the maximum number of conferences the user has been invited to, then conferences are returned within index range of (from,maximum number of conferences user has been invited to).
  '/v1/user/{user_uuid}/favourite_conferences':
    get:
      description: |-
        HooT's UserFavouriteConference API fetches the list of conferences a user has marked as favourite.
        The API returns the list of all the conferences user has marked as favourite in the form of a JSON object.
        Unique user id as `user_uuid` is passed as a path parameter to identify the user for whom the favoruite conferences are to be retrieved.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partyconf'
      parameters:
        - schema:
            type: string
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            minLength: 1
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            example: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      summary: UserFavouriteConference
      operationId: get-user-user_uuid-favourite_conferences
    parameters:
      - schema:
          type: string
          example: a5c818fb-bd18-41f6-a030-745ff9fe7f21
          minLength: 1
          maxLength: 36
          pattern: ^(?!\s*$).+
        name: user_uuid
        in: path
        required: true
        description: unique user id used to identify a user
  '/v1/user/{user_uuid}/set_favourite_conference/{conf_id}':
    parameters:
      - schema:
          type: string
          pattern: ^(?!\s*$).+
          minLength: 1
          maxLength: 36
          example: a5c818fb-bd18-41f6-a030-745ff9fe7f21
        name: user_uuid
        in: path
        required: true
        description: unique user id used to identify a user
      - schema:
          type: string
          pattern: ^(?!\s*$).+
          minLength: 1
          example: 6e19e88d-634f-4872-826b-2d26503caba1
        name: conf_id
        in: path
        required: true
        description: unique conference id used to identify a conference
    post:
      summary: UserSetFavouriteConference
      operationId: post-user-user_uuid-set_favourite_conference-conf_id
      responses:
        '202':
          description: Accepted
      parameters:
        - schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            minLength: 1
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            example: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |-
        You can leverage HooT's UserSetFavouriteConference API to mark a conference as favourite for a particular user. 
        On successful addition to the Favourites list, the API will return a 202 response code.
        Conference Id as `conf_id` and Unique user id as `user_uuid` are passed as path parameters to identify the conference and user respectively.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
  '/v1/user/{user_uuid}/unset_favourite_conference/{conf_id}':
    parameters:
      - schema:
          type: string
          example: a5c818fb-bd18-41f6-a030-745ff9fe7f21
          pattern: ^(?!\s*$).+
          minLength: 1
          maxLength: 36
        name: user_uuid
        in: path
        required: true
        description: unique user id used to identify a user
      - schema:
          type: string
          example: 6e19e88d-634f-4872-826b-2d26503caba1
          pattern: ^(?!\s*$).+
          minLength: 1
        name: conf_id
        in: path
        required: true
        description: unique conference id used to identify a conference
    post:
      summary: UserUnsetFavouriteConference
      operationId: post-user-user_uuid-unset_favourite_conference-conf_id
      responses:
        '202':
          description: Accepted
      parameters:
        - schema:
            type: string
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            minLength: 1
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            example: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |-
        You can leverage HooT's UserUnsetFavouriteConference API to remove a conference from favourites for a particular user. 
        On successful removal from Favourites, the API will return a 202 response code.
        Conference Id as `conf_id` and Unique user id as `user_uuid` are passed as path parameters to identify the conference and user respectively.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
  '/v1/search/conferences/{search_string}':
    parameters:
      - schema:
          type: string
          minLength: 3
          pattern: '^[a-zA-Z0-9_]*$'
          example: searchterm1
        name: search_string
        in: path
        required: true
        description: Search term that should be present in the conference name.
    get:
      summary: SearchConferences
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partyconf'
              examples: {}
      operationId: get-search-conferences-search_string
      parameters:
        - schema:
            type: integer
            default: -1
          in: query
          name: count
          description: limit result to number of results (-1 means all)
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |
        Leverage HooT's SearchConferences API to fetch list of conferences that include the search string coined `search_string`, passed a path parameter.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        `count` is passed as a query parameter that signifies the limit to number of search results.By default, it's -1 which means returns all the search results.
        Conferences found that includes the search term in conference name, will be returned as elements of a list object with a 200 response code, as shown in `example-1`.
  /v1/say_hello:
    post:
      summary: SayHello
      tags: []
      responses:
        '201':
          description: Created
        '202':
          description: Accepted
        '400':
          description: Bad Request
      operationId: get-v1-say_hello
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity'
            examples: {}
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
      x-internal: true
  '/v1/create_conference/{conference_name}':
    parameters:
      - schema:
          type: string
          example: Test-conf123
          pattern: ^(?!\s*$).+
          minLength: 1
        name: conference_name
        in: path
        required: true
        description: conference name by which a user can identify the conference.
    post:
      summary: CreateConference
      operationId: post-v1-create_conference-conference_name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partyconf'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                moderators:
                  type: array
                  items:
                    type: string
                    example: '["FTzYdTaBpUXhZ@gmail.com", "OiRWiMdPGLSPk@gmail.com"]'
                participants:
                  type: array
                  items:
                    type: string
                    example: '["FTzYdTaBpUXhZ@gmail.com", "OiRWiMdPGLSPk@gmail.com"]'
                features:
                  $ref: '#/components/schemas/features'
              required:
                - moderators
                - participants
            examples:
              Example 1:
                value:
                  moderators:
                    - '["FTzYdTaBpUXhZ@gmail.com", "OiRWiMdPGLSPk@gmail.com"]'
                  participants:
                    - '["FTzYdTaBpUXhZ@gmail.com", "OiRWiMdPGLSPk@gmail.com"]'
                  features:
                    join_audio_on: true
                    join_webcam_on: true
                    documents:
                      pdf_list:
                        - name: mydoc.pdf
                          base64_representation: string
                    message_for_moderator: string
                    branding_skin_color: '#97340F'
                    branding_logo_url: 'https://storage.googleapis.com/hoot-mx-api/hoot_2000_1012.png'
                    branding_client_title: string
                    welcome_document: string
                    invitation:
                      epoch_start: 0
                      epoch_end: 0
                      temporary_users:
                        - user@example.com
        description: |
          Request body accepts two mandatory parameters: moderators and participants. These are list objects containing email id of the moderators/participants you want to include in the conference. In case you want to create a conference with no moderators/participants(other than yourself), assign an empty list to both the parameters.
      parameters:
        - schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            minLength: 1
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            example: Generic
            enum:
              - Generic
              - Speakerbus
              - Melco
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |
        Use HooT's CreateConference API to seamlessly create new conferences. The API returns a JSON object containing the conference details, in case the conference has been successfully created, with a 200 reponse code.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        Conference name as `conference_name` is passed a path parameter.
  /v1/status:
    get:
      summary: Status
      tags: []
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
      operationId: get-v1-status
      description: readiness & liveness probe
      x-internal: true
  '/v1/x/{b64_URL}':
    parameters:
      - schema:
          type: string
          example: TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcmsu
          pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
        name: b64_URL
        in: path
        required: true
        description: conference URL in encoded in Base 64 format
    get:
      summary: Xform
      tags: []
      responses:
        '302':
          description: Found
          headers:
            Location:
              schema:
                type: string
              description: location of the actual join_url
        '404':
          description: Not Found
      operationId: get-x-b64_URL
      parameters:
        - schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            minLength: 1
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
            example: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |-
        HooT's Get Base64 URL API takes Base64 encoded conference URL coined `b64_URL` as a path parameter and returns the actual join URL as a JSON String with 302 response code.
        If the encoded URL is not valid, the API returns a 404 response code.
      x-internal: true
  '/v1/conf/{conf_id}':
    parameters:
      - schema:
          type: string
          example: 6e19e88d-634f-4872-826b-2d26503caba1
          minLength: 1
          pattern: ^(?!\s*$).+
        name: conf_id
        in: path
        required: true
        description: unique conference id used to identify a conference
    delete:
      summary: DeleteConference
      operationId: delete-v1-conf-conf_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples: {}
        '404':
          description: Not Found
      parameters:
        - schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            minLength: 1
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            example: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |-
        Use the DeleteConference API to delete any conference.
        The API returns a 200 response code when a conference has been successfully deleted, else it will return a 404 response code if no conference is found with the given conference id.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        Conference ID as `conf_id` is passed as a path parameter to uniquely identify the conference.
  '/v1/user/{user_id}/search_strings/{search_string}':
    parameters:
      - schema:
          type: string
          example: a5c818fb-bd18-41f6-a030-745ff9fe7f21
          pattern: ^(?!\s*$).+
          minLength: 1
          maxLength: 36
        name: user_id
        in: path
        required: true
        description: unique user id to identify a user
      - schema:
          type: string
          example: searchterm1
          minLength: 1
          pattern: '^[a-zA-Z0-9_]*$'
        name: search_string
        in: path
        required: true
        description: search term to be added to user's search history
    put:
      summary: AddUserSearchString
      operationId: put-user-user_id-search_strings-;
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            minLength: 1
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
            example: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |-
        Use HooT's AddUserSearchString API to add a search term to user's search history.
        The API takes the user's unique user id as `user_id` and search term as `search_string`,as path parameters.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        On successfully adding the search term, the API will return a 200 response code.
  '/v1/user/{user_id}/search_strings':
    parameters:
      - schema:
          type: string
          pattern: ^(?!\s*$).+
          minLength: 1
          maxLength: 36
          example: a5c818fb-bd18-41f6-a030-745ff9fe7f21
        name: user_id
        in: path
        required: true
        description: unique user id to identify a user
    get:
      summary: UserSearchStrings
      operationId: get-user-user_id-search_strings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                example-1:
                  value:
                    - searchterm1
                    - searchterm2
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      parameters:
        - schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            minLength: 1
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
            example: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |-
        Use HooT's UserSearchStrings API to get a list of user's search history.
        The API takes the user's unique user id as `user_id` as a path parameter.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        On successful execution, the API will return a JSON object as shown in `example-1`,with a 200 response code.
  /v1/check_entry_code:
    post:
      summary: CheckEntryCode
      operationId: post-v1-check_entry_code
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
      x-internal: true
  '/v1/edit_conference/{conf_id}':
    parameters:
      - schema:
          type: string
          example: 6e19e88d-634f-4872-826b-2d26503caba1
          minLength: 1
          pattern: ^(?!\s*$).+
        name: conf_id
        in: path
        required: true
        description: unique conference id used to identify a conference
    post:
      summary: EditConference
      operationId: post-v1-edit_conference-conference_name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partyconf'
              examples: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  moderators:
                    - string
                  participants:
                    - string
              properties:
                new_moderators:
                  type: array
                  items:
                    type: string
                    example: '["FTzYdTaBpUXhZ@gmail.com", "OiRWiMdPGLSPk@gmail.com"]'
                new_participants:
                  type: array
                  items:
                    type: string
                    example: '["FTzYdTaBpUXhZ@gmail.com", "OiRWiMdPGLSPk@gmail.com"]'
                remove_users:
                  type: array
                  items:
                    type: string
                    example: '["FTzYdTaBpUXhZ@gmail.com", "OiRWiMdPGLSPk@gmail.com"]'
                features:
                  $ref: '#/components/schemas/features'
              required:
                - new_moderators
                - new_participants
                - remove_users
            examples:
              example-1:
                value:
                  new_moderators:
                    - a@b.com
                    - def@ghi.com
                  new_participants:
                    - client@business.com
                  remove_users:
                    - kkk@gmail.com
        description: |-
          Request body accepts three mandatory parameters: new moderators as `new_moderators`,new participants as `new_participants` and remove users as `remove_users` .These are list objects containing email id of the moderators/participants you want to include/remove from the conference. 
          In case you want to leave one of these parameters blank, just assign an empty list to the said parameter
      parameters:
        - schema:
            type: string
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            enum:
              - Generic
              - Speakerbus
              - Melco
            example: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: |
        Leverage HooT's EditConference API to add/remove participants from an existing conference. Additionally you can use this API to add existing participants or new participants as moderators to the conference.
        The API takes Conference ID as `conf_id` as a path parameter to uniquely identify the conference.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        On successfully edit, the API returns a 200 reponse code with a JSON object as shown in `example-1`.
  '/v1/conf/{conf_id}/all_users':
    parameters:
      - schema:
          type: string
          example: 6e19e88d-634f-4872-826b-2d26503caba1
          pattern: ^(?!\s*$).+
          minLength: 1
        name: conf_id
        in: path
        required: true
        description: unique conference id used to identify a conference.
    get:
      summary: AllUsersofConference
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  example-1:
                    moderators:
                      - abc@f.com
                    participants:
                      - dev@gmail.com
                properties:
                  moderators:
                    type: array
                    items:
                      type: string
                      example: '["FTzYdTaBpUXhZ@gmail.com", "OiRWiMdPGLSPk@gmail.com"]'
                  participants:
                    type: array
                    items:
                      type: string
                      example: '["FTzYdTaBpUXhZ@gmail.com", "OiRWiMdPGLSPk@gmail.com"]'
                required:
                  - moderators
                  - participants
              examples:
                example-1:
                  value:
                    moderators:
                      - abc@f.com
                    participants:
                      - dev@gmail.com
      operationId: get-v1-conf-conf_id-all_users
      description: |-
        Use HooT's AllUsersofConference API to fetch the list of all participants and moderators of a conference. The API takes conference ID as `conf_id` as a path param to identify the conference.
        If a conference is found with the given conference ID, the API will return a JSON object with two parameters `moderators` and `participants` containing the list of moderators and participants in the conference respectively.
        `Authorization-Token` and `x-hoot-instance` that signifies the instance name are passed as headers.
        Conference ID as `conf_id` is passed as a path parameter to uniquely identify the conference
      parameters:
        - schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            pattern: '(^[\w-]*\.[\w-]*\.[\w-]*$)'
            minLength: 1
          in: header
          name: Authorization
          description: Auth JWT token from IDP
          required: true
        - schema:
            type: string
            default: Generic
            example: Generic
            enum:
              - Generic
              - Speakerbus
              - Melco
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
  /v1/x:
    get:
      summary: XformByQueryParam
      tags: []
      operationId: get-v1-x
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
        - schema:
            type: string
          in: query
          name: u
          description: URL of the conference
          required: true
      description: Get URL conference as query param.
      responses:
        '302':
          description: Redirection to the conference UI.
          headers:
            Location:
              schema:
                type: string
              description: Location of the Conference
  '/v1/deep_link/{token}':
    parameters:
      - schema:
          type: string
        name: token
        in: path
        required: true
    get:
      summary: DeepLinkViaToken
      tags: []
      responses:
        '302':
          description: Redirection to JoinURL
          headers:
            Location:
              schema:
                type: string
              description: Location header for the conference.
      operationId: get-v1-deep_link-token
      x-internal: true
      description: DeepLink is an internal API which will activate the rails for joining a call and for relocating the coreMX if needed.
  '/v1/deep_link_bypass/{token}':
    parameters:
      - schema:
          type: string
        name: token
        in: path
        required: true
    get:
      summary: DeepLinkViaTokenBypass
      tags: []
      responses:
        '302':
          description: Redirection to JoinURL
          headers:
            Location:
              schema:
                type: string
              description: Location header for the conference.
      operationId: get-v1-deep_link-token-bypass
      x-internal: true
      description: Deep Link Bypass is to break the cyclic loop against iOS universal links.
  '/v1/conf_by_deep_link/{deep_link_token}':
    parameters:
      - schema:
          type: string
        name: deep_link_token
        in: path
        required: true
    get:
      summary: GetConferenceByDeepLinkToken
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conference_join'
              examples: {}
            application/xml:
              schema:
                type: object
                properties: {}
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-v1-conf_by_deep_link-deep_link_token
      parameters:
        - schema:
            type: string
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
      x-internal: true
  /apple-app-site-association:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  applinks:
                    type: object
                    properties:
                      apps:
                        type: array
                        items:
                          type: object
                          properties: {}
                      details:
                        type: array
                        items:
                          type: object
                          properties:
                            appID:
                              type: string
                            paths:
                              type: array
                              items:
                                type: string
                x-examples:
                  Example 1:
                    applinks:
                      apps: []
                      details:
                        - appID: 4P383YW2V3.com.hoot.IOS
                          paths:
                            - /v1/deep_link/*
      operationId: get-apple-app-site-association
      x-internal: true
  '/v1/deep_link/{token}/{participant_id}/sip':
    parameters:
      - schema:
          type: string
        name: token
        in: path
        required: true
      - schema:
          type: string
        name: participant_id
        in: path
        required: true
    get:
      summary: GetSIPDetailsForUserViaDeepLink
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sip'
        '404':
          description: Not Found
      operationId: get-v1-deep_link-token-sip
      parameters: []
  '/v1/deep_link_bypass/{token}/{participant_id}/sip':
    parameters:
      - schema:
          type: string
        name: token
        in: path
        required: true
      - schema:
          type: string
        name: participant_id
        in: path
        required: true
    get:
      summary: GetSIPDetailsForUserViaDeepLink-Bypass
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sip'
        '404':
          description: Not Found
      operationId: get-v1-deep_link-token-bypass-sip
      parameters: []
      description: Bypass links are to break iOS universal link loop but to exactly same as the non bypass equivalent.
  /.well-known/assetlinks.json:
    get:
      summary: Android Asset Link
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: array
                      items:
                        type: string
                    target:
                      type: object
                      properties:
                        namespace:
                          type: string
                        package_name:
                          type: string
                        sha256_cert_fingerprints:
                          type: array
                          items:
                            type: string
                x-examples:
                  Example 1:
                    - relation:
                        - delegate_permission/common.handle_all_urls
                      target:
                        namespace: android_app
                        package_name: com.hoot.mobile
                        sha256_cert_fingerprints:
                          - '83:5A:94:20:C9:52:3B:E8:F1:3F:7C:99:40:8D:7F:6A:AA:F6:8E:8E:B7:0B:4D:AC:EA:BC:57:98:4F:1A:F2:DF'
      operationId: get-.well-known-assetlinks.json
  '/v1/conf/{conf_id}/subscribe':
    parameters:
      - schema:
          type: string
        name: conf_id
        in: path
        required: true
    post:
      summary: SubscribeConference
      operationId: post-v1-conf-conf_id-subscribe
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  openid_configuration:
                    type: string
                  expiry_seconds:
                    type: number
                  id:
                    type: string
                    description: unique id of the subscription
                  conference_number:
                    type: string
                    description: 'conference voice bridge, all event will have this number as conference_id.'
                required:
                  - id
                  - conference_number
              examples:
                conf-1:
                  value:
                    openid_configuration: 'https://dev-bvjbxxca.us.auth0.com/.well-known/openid-configuration'
                    expiry_seconds: 259200
                    id: 00f05eac-7c13-4120-b3d5-b0b0500c62a9
                    conference_number: '98272818'
          headers: {}
        '404':
          description: Not Found
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                api_endpoint:
                  type: string
                  description: https REST endpoint
                  pattern: ^http
              required:
                - api_endpoint
            examples:
              Example 1:
                value:
                  api_endpoint: 'https://your-webservice.io/api/hook'
      description: 'Request to subscribe to a conference''s events. Provide the subscription '
  '/v1/subscription/{subscription_id}':
    parameters:
      - schema:
          type: string
        name: subscription_id
        in: path
        required: true
    delete:
      summary: DeleteSubscription
      operationId: delete-v1-subscribe
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Signed JWT from the IDP
        - schema:
            type: string
          in: header
          name: x-hoot-instance
          description: hoot instance
components:
  schemas:
    user:
      description: User object that contains various user information.
      type: object
      x-examples:
        example-1:
          given_name: Bhavika
          family_name: Bharti
          nickname: bhavika.bharti
          name: Bhavika Bharti
          picture: 'https://lh3.googleusercontent.com/a/AATXAJzsp85pVv6PdJNRYadaiSFm7ZZNYk7ZGrZwIA6k=s96-c'
          locale: en-GB
          updated_at: '2022-03-12T10:31:28.797Z'
          email: bhavika.bharti@mpsc.io
          email_verified: true
          sub: google-oauth2|108203387585675245469
      properties:
        given_name:
          type: string
          minLength: 1
          example: Dale
        family_name:
          type: string
          minLength: 1
          example: Steyn
        nickname:
          type: string
          minLength: 1
          example: Dale Steyn
        name:
          type: string
          minLength: 1
          example: Dale Steyn
        picture:
          type: string
          minLength: 1
          example: 'https://lh3.googleusercontent.com/a/ALm5wu3AXCbIRnDXn_dMPR1HDhBfHLJ0h51u6q4XyWru=s96-c1'
        locale:
          type: string
          minLength: 1
        updated_at:
          type: string
          minLength: 1
          example: '2022-11-15T12:00:49.009Z'
        email:
          type: string
          minLength: 1
          pattern: '^[a-zA-Z0-9.a-zA-Z0-9.!#$%&''*+-/=?^_`{|}~]+@[a-zA-Z0-9]+\.[a-zA-Z]+'
          example: dev@mpsc.io
        email_verified:
          type: boolean
        sub:
          type: string
          minLength: 1
          pattern: ^(?!\s*$).+
          example: google-oauth2|113951147567304752181
        uuid:
          type: string
          example: 938de4da-e94f-4367-80e7-c672814a55b0
          maxLength: 36
          minLength: 1
          pattern: ^(?!\s*$).+
        username:
          type: string
          minLength: 1
        idpRegistered:
          type: boolean
      required:
        - name
        - email
        - sub
    error:
      title: error
      type: object
      properties:
        code:
          type: number
        reason:
          type: string
        meta:
          type: object
      x-examples:
        example-1:
          code: 504
          reason: internal error
          meta: {}
    conference:
      type: object
      x-examples: {}
      description: Conference object that contains various attributes used in a conference.
      properties:
        id:
          type: string
          pattern: ^(?!\s*$).+
          minLength: 1
          example: 23f4c53b-4719-4581-96ca-dcc48cb8cadf
        name:
          type: string
          example: Test-conf123
          minLength: 1
        coremx:
          $ref: '#/components/schemas/coremx'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/participant'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/participant'
        mod_pass:
          type: string
        attend_pass:
          type: string
        welcome:
          type: string
          example: '<br>Welcome to <b>Test-aGMJXQYoP, SIP extn: 97263211</b>!'
          minLength: 1
        dial_number:
          type: string
          minLength: 1
          example: +44(0)35150021
          maxLength: 14
        voice_bridge:
          type: string
          example: '91991891'
          minLength: 1
          maxLength: 8
          pattern: '^(0|[1-9][0-9]*)$'
        web_voice:
          type: string
        logout_url:
          type: string
          pattern: 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'
          minLength: 1
          example: 'https://dev.hoot.mx'
        record:
          type: string
        duration:
          type: integer
        meta:
          type: string
        moderator_only_message:
          type: string
        auto_start_recording:
          type: boolean
        allow_start_stop_recording:
          type: boolean
        is_active:
          type: boolean
        hoot_instance:
          type: string
          description: X-Hoot-Instance of the CoreMX
          default: Generic
          pattern: '^[a-zA-Z0-9_]*$'
          example: Generic
          minLength: 1
        features:
          $ref: '#/components/schemas/features'
      required:
        - id
        - name
        - coremx
        - owners
        - participants
        - logout_url
        - is_active
        - hoot_instance
    coremx:
      title: coremx
      type: object
      x-internal: true
      description: The CoreMX implementation
      x-examples: {}
      properties:
        uuid:
          type: string
          pattern: ^(?!\s*$).+
          maxLength: 36
          minLength: 1
          example: a5c818fb-bd18-41f6-a030-745ff9fe7f22
        name:
          type: string
          example: gcp-z2
          pattern: ^(?!\s*$).+
          minLength: 1
        parent_cloud:
          type: string
          enum:
            - gcp
            - aws
            - azure
          default: gcp
        global_address:
          type: string
          example: 'https://gcp-a1.hoot.mx/hoot/api/'
          minLength: 1
          pattern: 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'
        capabilities:
          type: array
          items:
            type: string
        control_secret:
          type: string
        sip:
          $ref: '#/components/schemas/sip'
        tags:
          type: array
          items:
            type: string
            enum:
              - Generic
              - Melco
              - Speakerbus
      required:
        - name
        - parent_cloud
        - global_address
    sip:
      title: sip
      type: object
      x-examples: {}
      description: SIP object that contains information to make a conference call over SIP.
      properties:
        location:
          type: string
          pattern: '^(sip|sips):'
          example: 'sip:97263212@gcp-a1.hoot.mx'
          minLength: 1
        username:
          type: string
          example: 'sip:28012@gcp-a1.hoot.mx'
          minLength: 1
        secret:
          type: string
          pattern: '^[a-zA-Z0-9]*$'
          minLength: 1
          example: i1Aq7prad0lNXL6Fiawn123
        headers:
          type: object
        codecs:
          type: array
          items:
            type: string
        domain:
          type: string
          description: SIP domain
        protocol:
          type: string
          description: TCP or UDP
          enum:
            - TCP
            - UDP
          default: UDP
    entity:
      title: entity
      x-stoplight:
        id: tjz10xywe95na
      type: object
      x-examples: {}
      properties:
        type:
          type: string
          enum:
            - registry
            - coremx
            - login
            - other
        coremx:
          $ref: '#/components/schemas/coremx'
    participant:
      title: participant
      type: object
      description: Participant object that contains details of a participant or a moderator in a conference.
      x-examples:
        example-1:
          user:
            given_name: Dale
            family_name: Steyn
            nickname: Dale Steyn
            name: Dale Steyn
            picture: 'https://lh3.googleusercontent.com/a/fadf=s96-c1'
            locale: string
            updated_at: '2022-11-15T12:00:49.009Z'
            email: try@me.io
            email_verified: true
            sub: google-oauth2|113951147567304752181
            uuid: 938de4da-e94f-4367-80e7-c672814a55b0
            username: string
            idpRegistered: true
          join_url: 'https://devapi.hoot.mx/v1//x?u=asd=='
          is_moderator: true
          conf_provider_id: 23f4c53b-4129-4581-46ca-dcc48cb8cadb
          is_presenter: true
          is_listen_only: true
          has_video: true
          client_type: HTML5
          id: xxxx-4129-4581-46ca-dcc46cb8cadb
      properties:
        user:
          $ref: '#/components/schemas/user'
        join_url:
          type: string
          minLength: 1
          example: 'https://devapi.hoot.mx/v1//x?u=aPJ0cHM6Ly9wZml6ZXIubXBzYy5pby9ob290L2FwaS9qb2luP2F2YXRhclVSTD1odHRwcyUzQSUyRiUyRnMuZ3JhdmF0YXIuY29tJTJGYXZhdGFyJTJGZmFmMWI5MDBiOGIwZmJkMzJmMDIwZDA4Yzc3YWQzMjMlM0ZzJTNENDgwJTI2ciUzRHBnJTI2ZCUzRGh0dHBzJTI1M0ElMjUyRiUyNTJGY2RuLmF1dGgwLmNvbSUyNTJGYXZhdGFycyUyNTJGYmkucG5nJmNoZWNrc3VtPTJiMGMyMjQ5Mjk5ODg3OWRkZTBmZDhhM2RhYjhjYjFlMmE2ZjM3NzQmZnVsbE5hbWU9YmlyYXRiaGF0dGFjaGFyamVlJTQwZ21haWwuY29tJm1lZXRpbmdJRD1mZmQ4MTIxNy0yZjYxLTRjYTQtODVlNi00MWZhNWY4ZTQwMDkmcGFzc3dvcmQ9dFJrenp6Y3VCa2Z3ZVlac0VQbXlWUkZ5JnJlZGlyZWN0PXRydWUmdXNlcklEPTkzOGRlNGRhLWU5NGYtNDM2Ny04MGU3LWM2NzI4MTRhNTVlNg=='
        join_url_bypass:
          type: string
          minLength: 1
          example: 'https://devapi.hoot.mx/v1//x?u=aPJ0cHM6Ly9wZml6ZXIubXBzYy5pby9ob290L2FwaS9qb2luP2F2YXRhclVSTD1odHRwcyUzQSUyRiUyRnMuZ3JhdmF0YXIuY29tJTJGYXZhdGFyJTJGZmFmMWI5MDBiOGIwZmJkMzJmMDIwZDA4Yzc3YWQzMjMlM0ZzJTNENDgwJTI2ciUzRHBnJTI2ZCUzRGh0dHBzJTI1M0ElMjUyRiUyNTJGY2RuLmF1dGgwLmNvbSUyNTJGYXZhdGFycyUyNTJGYmkucG5nJmNoZWNrc3VtPTJiMGMyMjQ5Mjk5ODg3OWRkZTBmZDhhM2RhYjhjYjFlMmE2ZjM3NzQmZnVsbE5hbWU9YmlyYXRiaGF0dGFjaGFyamVlJTQwZ21haWwuY29tJm1lZXRpbmdJRD1mZmQ4MTIxNy0yZjYxLTRjYTQtODVlNi00MWZhNWY4ZTQwMDkmcGFzc3dvcmQ9dFJrenp6Y3VCa2Z3ZVlac0VQbXlWUkZ5JnJlZGlyZWN0PXRydWUmdXNlcklEPTkzOGRlNGRhLWU5NGYtNDM2Ny04MGU3LWM2NzI4MTRhNTVlNg=='
        is_moderator:
          type: boolean
        conf_provider_id:
          type: string
          pattern: ^(?!\s*$).+
          minLength: 1
          example: 23f4c53b-4119-4581-96ca-dcc48cb8cadb
        is_presenter:
          type: boolean
        is_listen_only:
          type: boolean
        has_video:
          type: boolean
        client_type:
          type: string
          default: HTML5
        id:
          type: string
          description: |
            id is same as user.uuid
          pattern: ^(?!\s*$).+
          minLength: 1
          example: 23f4c53b-4129-4581-96ca-dcc48cb8cadb
        epoch_expiry:
          type: integer
          description: expiry in seconds from epoch
    partyconf:
      title: userpartyconfconf
      x-stoplight:
        id: x0i74hr8vu5f9
      type: object
      description: Mapping of one user to conference for limited APIs
      x-examples: {}
      properties:
        party:
          $ref: '#/components/schemas/participant'
        conference:
          $ref: '#/components/schemas/conference'
    conference_join:
      title: conference_join
      x-stoplight:
        id: wx7567oiwprvu
      type: object
      properties:
        conference:
          $ref: '#/components/schemas/conference'
        coremx_join_url:
          type: string
          pattern: '^(http|https)://'
      required:
        - conference
        - coremx_join_url
    features:
      title: features
      x-stoplight:
        id: crfgh2eskte0i
      type: object
      x-examples:
        Example 1:
          join_audio_on: true
          join_webcam_on: true
          documents:
            pdf_list:
              - name: mydoc.pdf
                base64_representation: string
          message_for_moderator: string
          branding_skin_color: '#97340F'
          branding_logo_url: 'https://storage.googleapis.com/hoot-mx-api/hoot_2000_1012.png'
          branding_client_title: string
      properties:
        join_audio_on:
          type: boolean
          default: true
          description: user's audio to be on or off at joining
        join_webcam_on:
          type: boolean
          description: user's webcam to be on or off at joining
        documents:
          $ref: '#/components/schemas/conference_documents'
        message_for_moderator:
          type: string
          description: Special Message for Moderators only
        branding_skin_color:
          type: string
          description: |
            hex code of color (starting with #)
          pattern: ^#+
          example: '#97340F'
        branding_logo_url:
          type: string
          description: Branding Logo URL for Conference
          default: 'https://storage.googleapis.com/hoot-mx-api/hoot_2000_1012.png'
        branding_client_title:
          type: string
          description: Title of the HTML5 client
        welcome_document:
          type: string
        invitation:
          $ref: '#/components/schemas/invite'
    conference_documents:
      title: conference_documents
      x-stoplight:
        id: pal0hju57nq6m
      type: object
      properties:
        pdf_list:
          type: array
          description: 'list of pdf_document(s), 0th index(1st in the list)is used as default.'
          items:
            $ref: '#/components/schemas/pdf_document'
    pdf_document:
      title: pdf_document
      x-stoplight:
        id: tpr4cbeu50cjf
      type: object
      properties:
        name:
          type: string
          description: name of the document
          example: mydoc.pdf
        base64_representation:
          type: string
          description: base64 representation of the document
    invite:
      title: invite
      x-stoplight:
        id: n6ymfnn52ffxy
      type: object
      description: Invitation Properties to create the ICS invitation
      properties:
        epoch_start:
          type: integer
          description: seconds since epoch for conference start time
        epoch_end:
          type: integer
          description: seconds since epoch for conference end time
        temporary_users:
          type: array
          description: 'optional: users for an invitation to temporary conference link'
          items:
            type: string
            format: email
  securitySchemes:
    Authorization:
      type: http
      scheme: basic
security:
  - Authorization: []
