openapi: 3.0.0
info:
  title: HooT-API
  version: 1.0.0
  contact:
    name: HooT @ MPSC
    email: dev@mpsc.io
    url: 'https://www.hoot.mx/support-page'
  termsOfService: 'https://www.hoot.mx/terms-and-conditions/terms-and-conditions'
servers:
  - url: 'https://devapi.hoot.mx'
    description: Generic
  - url: 'https://melco-api.hoot.mx'
    description: Melco
paths:
  /v1/login:
    post:
      summary: ''
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  user_id:
                    type: string
                    minLength: 1
                  user_uuid:
                    type: string
                    minLength: 1
                required:
                  - user_id
                  - user_uuid
                x-examples:
                  example-1:
                    user_id: bhavika.bharti@mpsc.io
                    user_uuid: 123e4567-e89b-12d3-a456-426614174000
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      description: Record or register login event of a user
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
            enum:
              - Generic
              - Melco
              - Speakerbus
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
            examples:
              Example-BB:
                value:
                  given_name: Bhavika
                  family_name: Bharti
                  nickname: bhavika.bharti
                  name: Bhavika Bharti
                  picture: 'https://lh3.googleusercontent.com/a/AATXAJzsp85pVv6PdJNRYadaiSFm7ZZNYk7ZGrZwIA6k=s96-c'
                  locale: en-GB
                  updated_at: '2022-03-12T10:31:28.797Z'
                  email: bhavika.bharti@mpsc.io
                  email_verified: true
                  sub: google-oauth2|108203387585675245469
    parameters: []
  '/v1/check_conf/{conf_id}':
    parameters:
      - schema:
          type: string
        name: conf_id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: get-check_conf-conf_id
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
  '/v1/user/{user_uuid}/last_joined_conferences':
    parameters:
      - schema:
          type: string
        name: user_uuid
        in: path
        required: true
        description: User's UUID
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partyconf'
        '204':
          description: No Content
      operationId: get-user-user_uuid-last_joined
      parameters:
        - schema:
            type: integer
          in: query
          name: from
          description: from index
        - schema:
            type: integer
            default: -1
          in: query
          name: to
          description: to index (-1 means all)
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: 'get last_joined conferences for a user from index - to index. If from > max(joined), then return 204. If to > max(joined) then from to max(joined)'
  '/v1/user/{user_uuid}/invited_to_conferences':
    parameters:
      - schema:
          type: string
        name: user_uuid
        in: path
        required: true
        description: User's UUID
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partyconf'
        '204':
          description: No Content
      operationId: get-user-user_uuid-invited_to_conferences
      parameters:
        - schema:
            type: integer
            minimum: 0
          in: query
          name: from
          description: from index
        - schema:
            type: integer
            default: -1
          in: query
          name: to
          description: to index (-1) means all or max
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
      description: 'get invited_to_conferences conferences for a user from index - to index. If from > max(invited_to_conferences), then return 204. If to > max(invited_to_conferences) then from to max(invited_to_conferences)'
  '/v1/user/{user_uuid}/favourite_conferences':
    get:
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partyconf'
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
    parameters:
      - schema:
          type: string
        name: user_uuid
        in: path
        required: true
  '/v1/user/{user_uuid}/set_favourite_conference/{conf_id}':
    parameters:
      - schema:
          type: string
        name: user_uuid
        in: path
        required: true
      - schema:
          type: string
        name: conf_id
        in: path
        required: true
    post:
      summary: ''
      operationId: post-user-user_uuid-set_favourite_conference-conf_id
      responses:
        '202':
          description: Accepted
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
  '/v1/user/{user_uuid}/unset_favourite_conference/{conf_id}':
    parameters:
      - schema:
          type: string
        name: user_uuid
        in: path
        required: true
      - schema:
          type: string
        name: conf_id
        in: path
        required: true
    post:
      summary: ''
      operationId: post-user-user_uuid-unset_favourite_conference-conf_id
      responses:
        '202':
          description: Accepted
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
  '/v1/search/conferences/{search_string}':
    parameters:
      - schema:
          type: string
          minLength: 3
        name: search_string
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partyconf'
      operationId: get-search-conferences-search_string
      parameters:
        - schema:
            type: integer
            default: -1
          in: query
          name: count
          description: limit result to number of results (-1 means all)
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
  /v1/say_hello:
    post:
      summary: Say Hello
      tags: []
      responses:
        '201':
          description: Created
        '202':
          description: Accepted
        '400':
          description: Bad Request
      operationId: get-v1-say_hello
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entity'
            examples: {}
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
  '/v1/create_conference/{conference_name}':
    parameters:
      - schema:
          type: string
        name: conference_name
        in: path
        required: true
    post:
      summary: ''
      operationId: post-v1-create_conference-conference_name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partyconf'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                moderators:
                  type: array
                  items:
                    type: string
                participants:
                  type: array
                  items:
                    type: string
            examples: {}
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
  /v1/status:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
      operationId: get-v1-status
      description: readiness & liveness probe
  '/v1/x/{b64_URL}':
    parameters:
      - schema:
          type: string
        name: b64_URL
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '302':
          description: Found
          headers:
            Location:
              schema:
                type: string
              description: location of the actual join_url
        '404':
          description: Not Found
      operationId: get-x-b64_URL
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
  '/v1/conf/{conf_id}':
    parameters:
      - schema:
          type: string
        name: conf_id
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-v1-conf-conf_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples: {}
        '404':
          description: Not Found
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
  '/v1/user/{user_id}/search_strings/{search_string}':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
      - schema:
          type: string
        name: search_string
        in: path
        required: true
    put:
      summary: ''
      operationId: put-user-user_id-search_strings-;
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
  '/v1/user/{user_id}/search_strings':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    get:
      summary: ''
      operationId: get-user-user_id-search_strings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
  /v1/check_entry_code:
    post:
      summary: ''
      operationId: post-v1-check_entry_code
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
  '/v1/edit_conference/{conf_id}':
    parameters:
      - schema:
          type: string
        name: conf_id
        in: path
        required: true
    post:
      summary: ''
      operationId: post-v1-edit_conference-conference_name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partyconf'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  moderators:
                    - string
                  participants:
                    - string
              properties:
                new_moderators:
                  type: array
                  items:
                    type: string
                new_participants:
                  type: array
                  items:
                    type: string
                remove_users:
                  type: array
                  items:
                    type: string
            examples:
              example-1:
                value:
                  new_moderators:
                    - a@b.com
                    - def@ghi.com
                  new_participants:
                    - client@business.com
                  remove_users:
                    - kkk@gmail.com
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
      description: 'Edit the conference `conf_id` users, provide `new_moderators`, `new_participants` and users to be removed as `remove_users`'
  '/v1/conf/{conf_id}/all_users':
    parameters:
      - schema:
          type: string
        name: conf_id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  moderators:
                    type: array
                    items:
                      type: string
                  participants:
                    type: array
                    items:
                      type: string
                x-examples:
                  example-1:
                    moderators:
                      - abc@f.com
                    participants:
                      - dev@gmail.com
              examples:
                example-1:
                  value:
                    moderators:
                      - abc@f.com
                    participants:
                      - dev@gmail.com
      operationId: get-v1-conf-conf_id-all_users
      description: Get all participants and moderators of a conference with conference ID as `conf_id`.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
  /v1/x:
    get:
      summary: Your GET endpoint
      tags: []
      operationId: get-v1-x
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Auth JWT token from IDP
        - schema:
            type: string
            default: Generic
          in: header
          name: x-hoot-instance
          description: Instance name of the requesting entity
          required: true
        - schema:
            type: string
          in: query
          name: u
          description: URL of the conference
          required: true
      description: Get URL conference as query param.
      responses:
        '302':
          description: Redirection to the conference UI.
          headers:
            Location:
              schema:
                type: string
              description: Location of the Conference
components:
  schemas:
    user:
      description: ''
      type: object
      x-examples:
        example-1:
          given_name: Bhavika
          family_name: Bharti
          nickname: bhavika.bharti
          name: Bhavika Bharti
          picture: 'https://lh3.googleusercontent.com/a/AATXAJzsp85pVv6PdJNRYadaiSFm7ZZNYk7ZGrZwIA6k=s96-c'
          locale: en-GB
          updated_at: '2022-03-12T10:31:28.797Z'
          email: bhavika.bharti@mpsc.io
          email_verified: true
          sub: google-oauth2|108203387585675245469
      properties:
        given_name:
          type: string
          minLength: 1
        family_name:
          type: string
          minLength: 1
        nickname:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        picture:
          type: string
          minLength: 1
        locale:
          type: string
          minLength: 1
        updated_at:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
        email_verified:
          type: boolean
        sub:
          type: string
          minLength: 1
        uuid:
          type: string
        username:
          type: string
        idpRegistered:
          type: boolean
      required:
        - name
        - email
        - sub
    error:
      title: error
      type: object
      properties:
        code:
          type: number
        reason:
          type: string
        meta:
          type: object
      examples:
        - code: 503
          reason: the conference already exists
          meta:
            timestamp: ''
            reported_by: actor
    conference:
      type: object
      x-examples: {}
      properties:
        id:
          type: string
        name:
          type: string
        coremx:
          $ref: '#/components/schemas/coremx'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/participant'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/participant'
        mod_pass:
          type: string
        attend_pass:
          type: string
        welcome:
          type: string
        dial_number:
          type: string
        voice_bridge:
          type: string
        web_voice:
          type: string
        logout_url:
          type: string
        record:
          type: string
        duration:
          type: integer
        meta:
          type: string
        moderator_only_message:
          type: string
        auto_start_recording:
          type: boolean
        allow_start_stop_recording:
          type: boolean
        is_active:
          type: boolean
        hoot_instance:
          type: string
          description: X-Hoot-Instance of the CoreMX
          default: Generic
    coremx:
      title: coremx
      type: object
      x-internal: true
      description: The CoreMX implementation
      x-examples: {}
      properties:
        uuid:
          type: string
        name:
          type: string
        parent_cloud:
          type: string
          enum:
            - gcp
            - aws
            - azure
          default: gcp
        global_address:
          type: string
        capabilities:
          type: array
          items:
            type: string
        control_secret:
          type: string
        sip:
          $ref: '#/components/schemas/sip'
        tags:
          type: array
          items:
            type: string
            enum:
              - Generic
              - Melco
              - Speakerbus
      required:
        - name
        - parent_cloud
        - global_address
    sip:
      title: sip
      type: object
      properties:
        location:
          type: string
          pattern: '^(sip|sips)://'
        username:
          type: string
        secret:
          type: string
        headers:
          type: object
        codecs:
          type: array
          items:
            type: string
      x-examples: {}
    entity:
      title: entity
      x-stoplight:
        id: tjz10xywe95na
      type: object
      x-examples: {}
      properties:
        type:
          type: string
          enum:
            - registry
            - coremx
            - login
            - other
        coremx:
          $ref: '#/components/schemas/coremx'
    participant:
      title: participant
      x-stoplight:
        id: 9r0nh1aoi8pbz
      type: object
      properties:
        user:
          $ref: '#/components/schemas/user'
        join_url:
          type: string
        is_moderator:
          type: boolean
        conf_provider_id:
          type: string
        is_presenter:
          type: boolean
        is_listen_only:
          type: boolean
        has_video:
          type: boolean
        client_type:
          type: string
          default: HTML5
        id:
          type: string
          description: |
            id is same as user.uuid
    partyconf:
      title: userpartyconfconf
      x-stoplight:
        id: x0i74hr8vu5f9
      type: object
      description: Mapping of one user to conference for limited APIs
      x-examples: {}
      properties:
        party:
          $ref: '#/components/schemas/participant'
        conference:
          $ref: '#/components/schemas/conference'
  securitySchemes:
    Authorization:
      type: http
      scheme: basic
security:
  - Authorization: []
