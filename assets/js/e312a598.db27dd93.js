"use strict";(self.webpackChunkuser_guide=self.webpackChunkuser_guide||[]).push([[9377],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=c(a),u=i,g=d["".concat(s,".").concat(u)]||d[u]||p[u]||o;return a?n.createElement(g,l(l({ref:t},m),{},{components:a})):n.createElement(g,l({ref:t},m))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,l=new Array(o);l[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},59016:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var n=a(87462),i=(a(67294),a(3905));const o={slug:"UCAAS-HTML5",title:"HTML5 Powering Next-Generation Collaboration Systems like HooT.mx",authors:"amar",tags:["hoot","ucaas","HTML5","UCaaS","Telecom Collaboration Systems","WebRTC","Real-Time Communication","Multimedia Communication","Web Development","Frontend Technologies","JavaScript","CSS3","Browser Compatibility","Web Applications","APIs","DOM Manipulation","WebSocket API","Web Storage","Audio/Video Elements","Canvas API","Performance Optimization","Web Security."]},l="HTML5: Powering Next-Generation Collaboration Systems",r={permalink:"/blog/UCAAS-HTML5",editUrl:"https://github.com/mpsc-io/branding/edit/main/user_guide/blog/2023-07-01-UCAAS-HTML5.md",source:"@site/blog/2023-07-01-UCAAS-HTML5.md",title:"HTML5 Powering Next-Generation Collaboration Systems like HooT.mx",description:"In the landscape of Unified Communication as a Service (UCaaS) and telecom solutions, HTML5 emerges as a powerful ally. The latest evolution of HTML, HTML5, is a core technology for constructing sophisticated web pages and web applications. Its expanded feature set presents a myriad of opportunities for creating interactive, real-time, and media-rich collaboration systems.",date:"2023-07-01T00:00:00.000Z",formattedDate:"July 1, 2023",tags:[{label:"hoot",permalink:"/blog/tags/hoot"},{label:"ucaas",permalink:"/blog/tags/ucaas"},{label:"HTML5",permalink:"/blog/tags/html-5"},{label:"UCaaS",permalink:"/blog/tags/u-caa-s"},{label:"Telecom Collaboration Systems",permalink:"/blog/tags/telecom-collaboration-systems"},{label:"WebRTC",permalink:"/blog/tags/web-rtc"},{label:"Real-Time Communication",permalink:"/blog/tags/real-time-communication"},{label:"Multimedia Communication",permalink:"/blog/tags/multimedia-communication"},{label:"Web Development",permalink:"/blog/tags/web-development"},{label:"Frontend Technologies",permalink:"/blog/tags/frontend-technologies"},{label:"JavaScript",permalink:"/blog/tags/java-script"},{label:"CSS3",permalink:"/blog/tags/css-3"},{label:"Browser Compatibility",permalink:"/blog/tags/browser-compatibility"},{label:"Web Applications",permalink:"/blog/tags/web-applications"},{label:"APIs",permalink:"/blog/tags/ap-is"},{label:"DOM Manipulation",permalink:"/blog/tags/dom-manipulation"},{label:"WebSocket API",permalink:"/blog/tags/web-socket-api"},{label:"Web Storage",permalink:"/blog/tags/web-storage"},{label:"Audio/Video Elements",permalink:"/blog/tags/audio-video-elements"},{label:"Canvas API",permalink:"/blog/tags/canvas-api"},{label:"Performance Optimization",permalink:"/blog/tags/performance-optimization"},{label:"Web Security.",permalink:"/blog/tags/web-security"}],readingTime:7.99,hasTruncateMarker:!1,authors:[{name:"Amar Akshat",title:"Sous-chef",key:"amar"}],frontMatter:{slug:"UCAAS-HTML5",title:"HTML5 Powering Next-Generation Collaboration Systems like HooT.mx",authors:"amar",tags:["hoot","ucaas","HTML5","UCaaS","Telecom Collaboration Systems","WebRTC","Real-Time Communication","Multimedia Communication","Web Development","Frontend Technologies","JavaScript","CSS3","Browser Compatibility","Web Applications","APIs","DOM Manipulation","WebSocket API","Web Storage","Audio/Video Elements","Canvas API","Performance Optimization","Web Security."]},nextItem:{title:"Use-Case Empowering Political Campaigns with HooT.MX",permalink:"/blog/UseCase-Political-Campaigns"}},s={authorsImageUrls:[void 0]},c=[{value:"HTML5 in the UCaaS Landscape",id:"html5-in-the-ucaas-landscape",level:2},{value:"HTML5: Enabling Telecom Innovation",id:"html5-enabling-telecom-innovation",level:2},{value:"HTML5: Challenges and Solutions",id:"html5-challenges-and-solutions",level:2},{value:"1. Manipulating the DOM (Document Object Model)",id:"1-manipulating-the-dom-document-object-model",level:2},{value:"2. Leveraging HTML5&#39;s Canvas",id:"2-leveraging-html5s-canvas",level:2},{value:"3. Customizing CSS (Cascading Style Sheets)",id:"3-customizing-css-cascading-style-sheets",level:2},{value:"4. Utilizing JavaScript Events and Listeners",id:"4-utilizing-javascript-events-and-listeners",level:2},{value:"5. HTML5&#39;s Audio and Video elements",id:"5-html5s-audio-and-video-elements",level:2},{value:"WebAssembly (Wasm)",id:"webassembly-wasm",level:2},{value:"Web Workers",id:"web-workers",level:2},{value:"Rust WASM",id:"rust-wasm",level:4}],m={toc:c};function p(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In the landscape of Unified Communication as a Service (UCaaS) and telecom solutions, HTML5 emerges as a powerful ally. The latest evolution of HTML, HTML5, is a core technology for constructing sophisticated web pages and web applications. Its expanded feature set presents a myriad of opportunities for creating interactive, real-time, and media-rich collaboration systems."),(0,i.kt)("h2",{id:"html5-in-the-ucaas-landscape"},"HTML5 in the UCaaS Landscape"),(0,i.kt)("p",null,"HTML5 marks a significant shift from static content towards a web filled with dynamic, interactive applications. New features, ranging from semantic improvements, real-time connectivity enhancements, multimedia capabilities, to device APIs, make it a competitive choice against proprietary tech like Flash or Silverlight."),(0,i.kt)("p",null,"Being an open standard, HTML5 is available across an extensive range of devices and platforms, ensuring your UCaaS offerings are broadly accessible without needing additional plugins or software."),(0,i.kt)("h2",{id:"html5-enabling-telecom-innovation"},"HTML5: Enabling Telecom Innovation"),(0,i.kt)("p",null,"Leveraging HTML5 offers numerous advantages that revolutionize the way we build and interact with collaboration systems:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Semantics"),": HTML5 introduces elements like ",(0,i.kt)("inlineCode",{parentName:"p"},"<header>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<footer>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<article>"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"<section>"),", which enhance the structure and readability of web content, making UI development intuitive.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Connectivity"),": Real-time communication is critical in UCaaS, and HTML5's WebSocket API allows for bidirectional, full-duplex communication channels over a single TCP connection.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Offline & Storage"),": With enhanced client-side storage, HTML5 makes collaboration tools more robust and reliable.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Multimedia"),": HTML5 natively supports audio and video elements, eliminating the need for external plugins. This is especially useful in UCaaS products, where multimedia communication is key.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"2D/3D & Effects"),": HTML5's canvas element, along with CSS3 and WebGL, enables creation of rich, interactive user interfaces, raising the bar for telecom collaboration systems."))),(0,i.kt)("h2",{id:"html5-challenges-and-solutions"},"HTML5: Challenges and Solutions"),(0,i.kt)("p",null,"Despite its potential, HTML5 comes with challenges:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Browser Compatibility"),": HTML5 features are not uniformly implemented across browsers or platforms, thus demanding careful planning and testing.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Performance"),": Complex operations, especially graphical ones, may not run smoothly on older devices, requiring performance optimization strategies.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Security"),": Ensuring privacy and security is paramount in UCaaS solutions. HTML5 features like offline storage and geolocation need careful handling."))),(0,i.kt)("p",null,"Nevertheless, with comprehensive testing and good security practices, these challenges can be mitigated."),(0,i.kt)("p",null,"In the coming sections, we'll deep-dive into HTML5's capabilities in context of telecom collaboration systems. We'll explore practical use-cases, such as manipulating the DOM for dynamic content updates, leveraging the HTML5 Canvas for interactive UIs, customizing CSS for seamless user experience, employing JavaScript events and listeners for responsive interfaces, and utilizing HTML5's audio and video elements for multimedia communication."),(0,i.kt)("h2",{id:"1-manipulating-the-dom-document-object-model"},"1. Manipulating the DOM (Document Object Model)"),(0,i.kt)("p",null,'In the context of web development, a "document" is the webpage loaded in the browser. The Document Object Model (DOM) is a programming interface for HTML and XML documents. It represents the structure of a document as a tree of objects. Each object, or "node" in this tree represents a part of the document (e.g., an element, an attribute, a piece of text, etc.). With the DOM, developers can manipulate the content and structure of the webpage with scripting languages like JavaScript.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mermaid Diagram Logic (Flowchart):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mermaid"},"graph LR\n    A[HTML Document] --\x3e B[JavaScript Function]\n    B --\x3e C[Modified HTML Document]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Practical Code Sample:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n<body>\n    <p id="demo">Hello, World!</p>\n    <button onclick="changeText()">Click me</button>\n\n    <script>\n    function changeText() {\n        document.getElementById("demo").innerHTML = "Hello, HTML5!";\n    }\n    <\/script>\n</body>\n</html>\n')),(0,i.kt)("p",null,"When you click the button, the JavaScript function changes the text of the paragraph from 'Hello, World!' to 'Hello, HTML5!'."),(0,i.kt)("h2",{id:"2-leveraging-html5s-canvas"},"2. Leveraging HTML5's Canvas"),(0,i.kt)("p",null,"The canvas element is part of HTML5 and allows for dynamic, scriptable rendering of 2D shapes and bitmap images. It is a low-level, flexible graphical tool that you can use to create visual components like graphs or even game graphics."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mermaid Diagram Logic (Flowchart):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mermaid"},"graph LR\n    A[HTML Document with Canvas] --\x3e B[JavaScript Rendering on Canvas]\n    B --\x3e C[Final Output Image]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Practical Code Sample:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n<body>\n    <canvas id="myCanvas" width="500" height="500" style="border:1px solid #d3d3d3;">\n    Your browser does not support the HTML5 canvas tag.\n    </canvas>\n\n    <script>\n    var canvas = document.getElementById("myCanvas");\n    var ctx = canvas.getContext("2d");\n    ctx.beginPath();\n    ctx.arc(95, 50, 40, 0, 2 * Math.PI);\n    ctx.stroke();\n    <\/script>\n</body>\n</html>\n')),(0,i.kt)("p",null,"This example uses JavaScript to draw a circle on the canvas."),(0,i.kt)("h2",{id:"3-customizing-css-cascading-style-sheets"},"3. Customizing CSS (Cascading Style Sheets)"),(0,i.kt)("p",null,"CSS, in combination with HTML5, can be used to create dynamic user interfaces with animations, transitions, and other visual effects. CSS is a stylesheet language used to describe the look and formatting of a document written in HTML."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mermaid Diagram Logic (Flowchart):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mermaid"},"graph LR\n    A[HTML Document] --\x3e B[CSS Styles]\n    B --\x3e C[Styled HTML Document]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Practical Code Sample:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<!DOCTYPE html>\n<html>\n<head>\n<style>\np {\n  font-size: 20px;\n  color: red;\n  text-align: center;\n}\n</style>\n</head>\n<body>\n\n<p>Hello, HTML5 and CSS!</p>\n\n</body>\n</html>\n")),(0,i.kt)("p",null,"In this example, CSS is used to style a paragraph with red color, center alignment, and a font size of 20px."),(0,i.kt)("h2",{id:"4-utilizing-javascript-events-and-listeners"},"4. Utilizing JavaScript Events and Listeners"),(0,i.kt)("p",null,"Events are actions or occurrences that happen in the system you are programming, which the system tells you about so you can respond to them in some way if desired. For example, if"),(0,i.kt)("p",null,"the user clicks a button on a webpage, you might want to respond to that action by displaying an information box."),(0,i.kt)("p",null,"JavaScript event listeners are functions that wait for these events to happen and then execute code in response."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mermaid Diagram Logic (Sequence Diagram):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mermaid"},"sequenceDiagram\n    participant User\n    participant Button\n    participant Listener\n    User->>Button: Clicks Button\n    Button->>Listener: Triggers Click Event\n    Listener->>User: Displays Information Box\n")),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(96492).Z,width:"651",height:"372"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Practical Code Sample:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n<body>\n\n<button onclick="displayAlert()">Click me</button>\n\n<script>\nfunction displayAlert() {\n  alert("Hello, HTML5 and JavaScript!");\n}\n<\/script>\n\n</body>\n</html>\n')),(0,i.kt)("p",null,"When you click the button, a JavaScript function is executed that displays an alert box with a message."),(0,i.kt)("h2",{id:"5-html5s-audio-and-video-elements"},"5. HTML5's Audio and Video elements"),(0,i.kt)("p",null,"HTML5 introduced native Audio and Video elements which allow multimedia to be embedded directly into web pages. They can be controlled via JavaScript to create custom controls, autoplay features, and more."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mermaid Diagram Logic (Flowchart):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mermaid"},"graph LR\n    A[HTML Document with Audio/Video Element] --\x3e B[JavaScript Control]\n    B --\x3e C[Modified Audio/Video Playback]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Practical Code Sample:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n<body>\n\n<audio id="myAudio" controls>\n  <source src="audio.mp3" type="audio/mpeg">\n  Your browser does not support the audio element.\n</audio>\n\n<button onclick="playAudio()" type="button">Play Audio</button>\n\n<script>\nfunction playAudio() { \n  document.getElementById("myAudio").play(); \n}\n<\/script>\n\n</body>\n</html>\n')),(0,i.kt)("p",null,"In this example, an audio file is embedded into the webpage, and a custom button is used to play the audio file using JavaScript."),(0,i.kt)("h2",{id:"webassembly-wasm"},"WebAssembly (Wasm)"),(0,i.kt)("p",null,"WebAssembly is a binary instruction format that allows you to run code written in languages like C, C++, and Rust at near-native speed on the web. It's designed as a portable target for the compilation of high-level languages, enabling deployments on the web for client and server applications."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mermaid Diagram Logic (Flowchart):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mermaid"},"graph LR\n    A[High-level Language Code C, C++, Rust] --\x3e B[WebAssembly Compilation]\n    B --\x3e C[Binary Code]\n    C --\x3e D[Execution in the Browser]\n")),(0,i.kt)("h2",{id:"web-workers"},"Web Workers"),(0,i.kt)("p",null,"Web Workers is a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. In addition, they can perform I/O using XMLHttpRequest (although the responseXML and channel attributes are always null). Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mermaid Diagram Logic (Sequence Diagram):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mermaid"},"sequenceDiagram\n    participant Main Thread\n    participant Worker Thread\n    Main Thread->>Worker Thread: Posts message to Worker\n    Worker Thread->>Main Thread: Posts message back to Main Thread\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Practical JavaScript Code Sample:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Main Thread\nvar worker = new Worker(\'worker.js\');\nworker.onmessage = function(event) {\n    console.log("Received message " + event.data);\n    doSomething();\n}\nworker.postMessage("Hello Worker!");  \n\n// Inside worker.js (The Worker Thread)\nself.onmessage = function(event) {\n    console.log("Received message " + event.data);\n    self.postMessage("Hello Main Thread!");\n}\n')),(0,i.kt)("p",null,'This code initiates a worker thread from a main JavaScript thread. The main thread sends a message "Hello Worker!" to the worker thread. The worker thread receives the message, logs it, and sends a message back to the main thread saying "Hello Main Thread!".'),(0,i.kt)("h4",{id:"rust-wasm"},"Rust WASM"),(0,i.kt)("p",null,"Here's an example of compiling a Rust function to WebAssembly:"),(0,i.kt)("p",null,"Let's say you have a simple Rust function that adds two numbers in a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"lib.rs"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n")),(0,i.kt)("p",null,"To compile this Rust code to WebAssembly, you would first need to add a ",(0,i.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file to define your Rust project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "add"\nversion = "0.1.0"\nedition = "2018"\n\n[lib]\ncrate-type = ["cdylib"]\n\n[dependencies]\n')),(0,i.kt)("p",null,"You can then compile this project to WebAssembly using the ",(0,i.kt)("inlineCode",{parentName:"p"},"wasm-pack")," tool with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wasm-pack build --target web\n")),(0,i.kt)("p",null,"This command produces a ",(0,i.kt)("inlineCode",{parentName:"p"},"pkg")," directory which includes the compiled WebAssembly code (",(0,i.kt)("inlineCode",{parentName:"p"},"add_bg.wasm"),"), a JavaScript file (",(0,i.kt)("inlineCode",{parentName:"p"},"add.js"),") which you can use to import the WebAssembly module into a web page, and some other related files."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"add.js")," file could be used in a HTML file as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n<body>\n<script type="module">\nimport init, { add } from \'./pkg/add.js\';\n\nasync function run() {\n   await init();\n   console.log(add(1, 2)); // logs "3"\n}\n\nrun();\n\n<\/script>\n</body>\n</html>\n')),(0,i.kt)("p",null,"In this example, the WebAssembly module is loaded asynchronously with ",(0,i.kt)("inlineCode",{parentName:"p"},"init()"),", and then the ",(0,i.kt)("inlineCode",{parentName:"p"},"add()")," function exported from the Rust code is used to add two numbers. Note that all the wasm related operations should be done in asynchronous manner."),(0,i.kt)("p",null,"Make sure to have the necessary tools installed and set up, such as the Rust compiler and ",(0,i.kt)("inlineCode",{parentName:"p"},"wasm-pack"),", and to serve the HTML file from a local server due to browser security restrictions."))}p.isMDXComponent=!0},96492:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/mermaid-1-c3a9b4b5cb463717e91e792dae697f22.png"}}]);